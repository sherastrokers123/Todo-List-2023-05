{"ast":null,"code":"var _jsxFileName = \"/Users/alisher/Documents/Todo-List-2023-05/TodoList-4/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { Todolist } from './Components/Todolist';\nimport { v1 } from 'uuid';\nimport \"../\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  let [tasks, setTask] = useState([{\n    id: v1(),\n    title: \"css\",\n    isDone: true\n  }, {\n    id: v1(),\n    title: \"js\",\n    isDone: false\n  }, {\n    id: v1(),\n    title: \"html\",\n    isDone: true\n  }, {\n    id: v1(),\n    title: \"C++\",\n    isDone: false\n  }, {\n    id: v1(),\n    title: \"Python\",\n    isDone: false\n  }]);\n\n  //!checkbox\n  let changeStatusCheckbox = (taskID, isDone) => {\n    let task = tasks.find(t => {\n      return t.id === taskID;\n    });\n    if (task) {\n      task.isDone = isDone;\n    }\n    setTask([...tasks]);\n  };\n  //!Remove task\n\n  let removeTask = id => {\n    tasks = tasks.filter(t => {\n      if (t.id !== id) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    setTask(tasks);\n  };\n\n  //!Filtered tasks\n\n  let [filter, setFilter] = useState(\"All\");\n  let tasksForTdolist = tasks;\n  if (filter === \"Completed\") {\n    tasksForTdolist = tasks.filter(t => {\n      return t.isDone === true;\n    });\n  }\n  if (filter === \"Active\") {\n    tasksForTdolist = tasks.filter(t => {\n      return t.isDone === false;\n    });\n  }\n  let changeFilter = value => {\n    setFilter(value);\n  };\n\n  // !Add task\n  let addTask = title => {\n    let newTask = {\n      id: v1(),\n      title: title,\n      isDone: false\n    };\n    let newTasks = [newTask, ...tasks];\n    setTask(newTasks);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(Todolist, {\n      title: \"Todo List\",\n      tasks: tasksForTdolist,\n      removeTask: removeTask,\n      changeFilter: changeFilter,\n      addTask: addTask,\n      changeStatusCheckbox: changeStatusCheckbox\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"5pV3dgFOrOeYLM5EInkIKUPDslE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Todolist","v1","App","tasks","setTask","id","title","isDone","changeStatusCheckbox","taskID","task","find","t","removeTask","filter","setFilter","tasksForTdolist","changeFilter","value","addTask","newTask","newTasks"],"sources":["/Users/alisher/Documents/Todo-List-2023-05/TodoList-4/src/App.tsx"],"sourcesContent":["\r\nimport { useState } from 'react';\r\nimport { Todolist, TaskType } from './Components/Todolist';\r\nimport { v1 } from 'uuid';\r\nimport \"../\"\r\nexport type FilterValuesType = \"All\" | \"Active\" | \"Completed\"\r\n\r\nfunction App() {\r\n\r\n    let [tasks, setTask] = useState<TaskType[]>\r\n        (\r\n            [\r\n                { id: v1(), title: \"css\", isDone: true },\r\n                { id: v1(), title: \"js\", isDone: false },\r\n                { id: v1(), title: \"html\", isDone: true },\r\n                { id: v1(), title: \"C++\", isDone: false },\r\n                { id: v1(), title: \"Python\", isDone: false },\r\n            ]\r\n        )\r\n\r\n    //!checkbox\r\n    let changeStatusCheckbox = (taskID: string, isDone: boolean) => {\r\n        let task = tasks.find((t) => {\r\n            return t.id === taskID\r\n        })\r\n        if (task) {\r\n            task.isDone = isDone\r\n        }\r\n        setTask([...tasks])\r\n    }\r\n    //!Remove task\r\n\r\n    let removeTask = (id: string) => {\r\n        tasks = tasks.filter((t) => {\r\n            if (t.id !== id) {\r\n                return true;\r\n            } else {\r\n                return false;\r\n            }\r\n        })\r\n        setTask(tasks)\r\n    };\r\n\r\n    //!Filtered tasks\r\n\r\n    let [filter, setFilter] = useState<FilterValuesType>(\"All\");\r\n    let tasksForTdolist = tasks;\r\n    if (filter === \"Completed\") {\r\n        tasksForTdolist = tasks.filter((t) => {\r\n            return t.isDone === true;\r\n        })\r\n    }\r\n    if (filter === \"Active\") {\r\n        tasksForTdolist = tasks.filter((t) => {\r\n            return t.isDone === false;\r\n        })\r\n    }\r\n    let changeFilter = (value: FilterValuesType) => {\r\n        setFilter(value);\r\n    };\r\n\r\n    // !Add task\r\n    let addTask = (title: string) => {\r\n        let newTask = { id: v1(), title: title, isDone: false };\r\n        let newTasks = [newTask, ...tasks];\r\n        setTask(newTasks);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Todolist\r\n                title='Todo List'\r\n                tasks={tasksForTdolist}\r\n                removeTask={removeTask}\r\n                changeFilter={changeFilter}\r\n                addTask={addTask}\r\n                changeStatusCheckbox={changeStatusCheckbox}\r\n            />\r\n        </div >\r\n    )\r\n}\r\n\r\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}